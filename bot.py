import logging
import json
import sqlite3
import requests
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, filters, CallbackQueryHandler
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_TOKEN = "8324877709:AAE_M6zfE6hj5G_ZpmJuAY4PuSSXBAiMYdo"
USDA_API_KEY = "Okpv8RdqZ0PZyOgtfhHMMcUnkWAPmC1f3kluHyVg"
ADMIN_ID = 8158576899

# === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–î ===
def init_db():
    with sqlite3.connect("food.db") as conn:
        c = conn.cursor()
        c.execute("""
        CREATE TABLE IF NOT EXISTS foods (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT UNIQUE,
            calories REAL,
            protein REAL,
            fat REAL,
            carbs REAL
        )""")
        c.execute("""
        CREATE TABLE IF NOT EXISTS meals (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            date TEXT,
            food_id INTEGER,
            FOREIGN KEY(food_id) REFERENCES foods(id)
        )""")
        conn.commit()

# === –ü–û–ò–°–ö –ü–†–û–î–£–ö–¢–ê –í –ë–î ===
def search_local_food(name):
    with sqlite3.connect("food.db") as conn:
        c = conn.cursor()
        c.execute("SELECT * FROM foods WHERE LOWER(name) LIKE ?", ('%' + name.lower() + '%',))
        return c.fetchone()

# === –î–û–ë–ê–í–õ–ï–ù–ò–ï –ü–†–û–î–£–ö–¢–ê –í –ë–î ===
def add_food(name, calories, protein, fat, carbs):
    with sqlite3.connect("food.db") as conn:
        c = conn.cursor()
        c.execute("INSERT OR IGNORE INTO foods (name, calories, protein, fat, carbs) VALUES (?, ?, ?, ?, ?)",
                  (name, calories, protein, fat, carbs))
        conn.commit()

# === –î–û–ë–ê–í–õ–ï–ù–ò–ï –ü–†–ò–Å–ú–ê –ü–ò–©–ò ===
def add_meal(user_id, food_id):
    with sqlite3.connect("food.db") as conn:
        c = conn.cursor()
        date = datetime.now().strftime("%Y-%m-%d")
        c.execute("INSERT INTO meals (user_id, date, food_id) VALUES (?, ?, ?)", (user_id, date, food_id))
        conn.commit()

# === –ü–û–õ–£–ß–ï–ù–ò–ï –°–£–ú–ú–´ –ó–ê –î–ï–ù–¨ ===
def get_today_summary(user_id):
    date = datetime.now().strftime("%Y-%m-%d")
    with sqlite3.connect("food.db") as conn:
        c = conn.cursor()
        c.execute("""
        SELECT f.name, f.calories, f.protein, f.fat, f.carbs
        FROM meals m
        JOIN foods f ON m.food_id = f.id
        WHERE m.user_id = ? AND m.date = ?
        """, (user_id, date))
        rows = c.fetchall()

    if not rows:
        return "üì≠ –°–µ–≥–æ–¥–Ω—è –≤—ã –Ω–∏—á–µ–≥–æ –Ω–µ –µ–ª–∏."

    total_cals = sum(row[1] for row in rows)
    total_prot = sum(row[2] for row in rows)
    total_fat = sum(row[3] for row in rows)
    total_carbs = sum(row[4] for row in rows)

    items = "\n".join([f"üçΩ {row[0]} ‚Äî {row[1]} –∫–∫–∞–ª" for row in rows])
    summary = f"\n\nüî• –í—Å–µ–≥–æ: {total_cals:.0f} –∫–∫–∞–ª\nü•© –ë–µ–ª–∫–∏: {total_prot:.1f} –≥\nü•ë –ñ–∏—Ä—ã: {total_fat:.1f} –≥\nüçû –£–≥–ª–µ–≤–æ–¥—ã: {total_carbs:.1f} –≥"
    return items + summary

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –Ø ‚Äî —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –¥–∏–µ—Ç–æ–ª–æ–≥! –ù–∞–ø–∏—à–∏ –º–Ω–µ, —á—Ç–æ —Ç—ã –µ–ª, –∏ —è —Å–∫–∞–∂—É —Ç–µ–±–µ –ë–ñ–£ –∏ –∫–∞–ª–æ—Ä–∏–∏.")

async def today(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    summary = get_today_summary(user_id)
    await update.message.reply_text(summary)

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    query = update.message.text
    food = search_local_food(query)
    if food:
        id, name, cal, prot, fat, carb = food
        text = f"üçΩ {name}\nüî• {cal} –∫–∫–∞–ª\nü•© {prot} –≥ –±–µ–ª–∫–∞\nü•ë {fat} –≥ –∂–∏—Ä–∞\nüçû {carb} –≥ —É–≥–ª–µ–≤–æ–¥–æ–≤"
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≤ –¥–Ω–µ–≤–Ω–∏–∫", callback_data=f"add:{id}")]
        ])
        await update.message.reply_text(text, reply_markup=keyboard)
    else:
        await update.message.reply_text("‚ùå –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ. –ò—Å–ø–æ–ª—å–∑—É–π /add –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.")

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data.startswith("add:"):
        food_id = int(data.split(":")[1])
        user_id = query.from_user.id
        add_meal(user_id, food_id)
        await query.edit_message_text("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –¥–Ω–µ–≤–Ω–∏–∫!")

async def add(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã.")
        return

    try:
        name = context.args[0]
        cal = float(context.args[1])
        prot = float(context.args[2])
        fat = float(context.args[3])
        carb = float(context.args[4])
        add_food(name, cal, prot, fat, carb)
        await update.message.reply_text(f"‚úÖ –ü—Ä–æ–¥—É–∫—Ç '{name}' –¥–æ–±–∞–≤–ª–µ–Ω!")
    except:
        await update.message.reply_text("‚ùó –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç:
/add –Ø–±–ª–æ–∫–æ 52 0.3 0.2 14")

# === –ì–õ–ê–í–ù–´–ô –ó–ê–ü–£–°–ö ===
def main():
    init_db()
    logging.basicConfig(level=logging.INFO)
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("today", today))
    app.add_handler(CommandHandler("add", add))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    app.run_polling()

if __name__ == "__main__":
    main()
